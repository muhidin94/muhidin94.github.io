{"version":3,"sources":["menu/post.js","menu/user.js","menu/transaction.js","menu/item.js","menu/schedule.js","menu/myAccount.js","menu/updatePrice.js","menu/trashPurchase.js","Dashboard.js","authProvider.js","App.js","serviceWorker.js","index.js"],"names":["PostFilter","props","react_default","a","createElement","Filter","TextInput","label","source","alwaysOn","ReferenceInput","reference","allowEmpty","SelectInput","optionText","PostList","List","Object","assign","filters","post_PostFilter","Responsive","small","SimpleList","primaryText","record","title","secondaryText","concat","views","tertiaryText","Date","published_at","toLocaleDateString","medium","Datagrid","TextField","ReferenceField","EditButton","PostTitle","_ref","PostEdit","Edit","post_PostTitle","SimpleForm","DisabledInput","LongTextInput","PostCreate","Create","UserList","user_PostFilter","EmailField","ChekTransaksi","transaction_PostFilter","ItemList","ScheduleList","MyAccount","cardStyle","width","minHeight","margin","display","verticalAlign","GAMBAR","style","Card_default","CardHeader_default","CardContent_default","CardActions_default","textAlign","UpdateHarga","updatePrice_GAMBAR","trashpurchase","Dashboard","authProvider","type","params","AUTH_LOGIN","username","localStorage","setItem","Promise","resolve","AUTH_LOGOUT","removeItem","AUTH_ERROR","status","reject","AUTH_CHECK","getItem","dataProvider","jsonServerProvider","theme","createMuiTheme","palette","primary","index","secondary","main","App","Admin","dashboard","Resource","name","list","edit","create","icon","PostIcon","UserIcon","AddShoppingCart","DateRange","AccountBox","AddCircleOutline","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8bc5b7d4.chunk.js","sourcesContent":["// in src/posts.js\r\nimport React from \"react\";\r\nimport {\r\n  List,\r\n  Responsive,\r\n  SimpleList,\r\n  Edit,\r\n  Create,\r\n  Datagrid,\r\n  ReferenceField,\r\n  TextField,\r\n  EditButton,\r\n  DisabledInput,\r\n  LongTextInput,\r\n  Filter,\r\n  ReferenceInput,\r\n  SelectInput,\r\n  SimpleForm,\r\n  TextInput\r\n} from \"react-admin\";\r\n\r\nconst PostFilter = props => (\r\n  <Filter {...props}>\r\n    <TextInput label=\"Search\" source=\"q\" alwaysOn />\r\n    <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\" allowEmpty>\r\n      <SelectInput optionText=\"name\" />\r\n    </ReferenceInput>\r\n  </Filter>\r\n);\r\n\r\nexport const PostList = props => (\r\n  <List {...props} filters={<PostFilter />}>\r\n    <Responsive\r\n      small={\r\n        <SimpleList\r\n          primaryText={record => record.title}\r\n          secondaryText={record => `${record.views} views`}\r\n          tertiaryText={record =>\r\n            new Date(record.published_at).toLocaleDateString()\r\n          }\r\n        />\r\n      }\r\n      medium={\r\n        <Datagrid>\r\n          <TextField source=\"id\" />\r\n          <ReferenceField label=\"User\" source=\"userId\" reference=\"users\">\r\n            <TextField source=\"name\" />\r\n          </ReferenceField>\r\n          <ReferenceField label=\"Email\" source=\"email\" reference=\"users\">\r\n            <TextField source=\"email\" />\r\n          </ReferenceField>\r\n          <TextField source=\"title\" />\r\n          <TextField source=\"body\" />\r\n          <EditButton />\r\n        </Datagrid>\r\n      }\r\n    />\r\n  </List>\r\n);\r\n\r\nconst PostTitle = ({ record }) => {\r\n  return <span>Post {record ? `\"${record.title}\"` : \"\"}</span>;\r\n};\r\n\r\nexport const PostEdit = props => (\r\n  <Edit title={<PostTitle />} {...props}>\r\n    <SimpleForm>\r\n      <DisabledInput source=\"id\" />\r\n      <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\">\r\n        <SelectInput optionText=\"name\" />\r\n      </ReferenceInput>\r\n      <TextInput source=\"title\" />\r\n      <LongTextInput source=\"body\" />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n\r\nexport const PostCreate = props => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\">\r\n        <SelectInput optionText=\"name\" />\r\n      </ReferenceInput>\r\n      <TextInput source=\"title\" />\r\n      <LongTextInput source=\"body\" />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n","// in src/users.js\r\nimport React from \"react\";\r\nimport {\r\n  List,\r\n  Edit,\r\n  Datagrid,\r\n  EmailField,\r\n  TextField,\r\n  Filter,\r\n  Create,\r\n  TextInput,\r\n  ReferenceInput,\r\n  SelectInput,\r\n  SimpleForm,\r\n  LongTextInput,\r\n  SimpleList,\r\n  Responsive,\r\n  // EditButton,\r\n  // ShowButton,\r\n  // ReferenceField,\r\n  DisabledInput\r\n} from \"react-admin\";\r\n\r\n// const UserFilter = ({ permissions, ...props }) => (\r\n//   <Filter {...props}>\r\n//     <TextInput label=\"user.list.search\" source=\"q\" alwaysOn />\r\n//     <TextInput source=\"name\" />\r\n//     {permissions === \"admin\" ? <TextInput source=\"role\" /> : null}\r\n//   </Filter>\r\n// );\r\n\r\n// export const UserList = ({ permissions, ...props }) => (\r\n//   <List\r\n//     {...props}\r\n//     filters={<UserFilter permissions={permissions} />}\r\n//     sort={{ field: \"name\", order: \"ASC\" }}\r\n//   >\r\n//     <Responsive\r\n//       small={\r\n//         <SimpleList\r\n//           primaryText={record => record.name}\r\n//           secondaryText={record =>\r\n//             permissions === \"admin\" ? record.role : null\r\n//           }\r\n//         />\r\n//       }\r\n//       medium={\r\n//         <Datagrid>\r\n//           <TextField source=\"id\" />\r\n//           <TextField source=\"name\" />\r\n//           {permissions === \"admin\" && <TextField source=\"role\" />}\r\n//           {permissions === \"admin\" && <EditButton />}\r\n//           <ShowButton />\r\n//         </Datagrid>\r\n//       }\r\n//     />\r\n//   </List>\r\n// );\r\n\r\nconst PostFilter = props => (\r\n  <Filter {...props}>\r\n    <TextInput label=\"Search\" source=\"q\" alwaysOn />\r\n    <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\" allowEmpty>\r\n      <SelectInput optionText=\"name\" />\r\n    </ReferenceInput>\r\n  </Filter>\r\n);\r\n\r\nexport const UserList = props => (\r\n  <List title=\"All users\" {...props} filters={<PostFilter />}>\r\n    <Responsive\r\n      small={\r\n        <SimpleList\r\n          primaryText={record => record.title}\r\n          secondaryText={record => `${record.views} views`}\r\n          tertiaryText={record =>\r\n            new Date(record.published_at).toLocaleDateString()\r\n          }\r\n        />\r\n      }\r\n      medium={\r\n        <Datagrid>\r\n          <TextField source=\"id\" />\r\n          <TextField source=\"name\" />\r\n          <TextField source=\"username\" />\r\n          <EmailField source=\"email\" />\r\n        </Datagrid>\r\n      }\r\n    />\r\n  </List>\r\n);\r\nconst PostTitle = ({ record }) => {\r\n  return <span>Post {record ? `\"${record.title}\"` : \"\"}</span>;\r\n};\r\nexport const PostEdit = props => (\r\n  <Edit title={<PostTitle />} {...props}>\r\n    <SimpleForm>\r\n      <DisabledInput source=\"id\" />\r\n      <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\">\r\n        <SelectInput optionText=\"name\" />\r\n      </ReferenceInput>\r\n      <TextInput source=\"title\" />\r\n      <LongTextInput source=\"body\" />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n\r\nexport const PostCreate = props => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\">\r\n        <SelectInput optionText=\"name\" />\r\n      </ReferenceInput>\r\n      <TextInput source=\"title\" />\r\n      <LongTextInput source=\"body\" />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n","// in src/users.js\r\nimport React from \"react\";\r\nimport {\r\n  List,\r\n  Edit,\r\n  Datagrid,\r\n  EmailField,\r\n  TextField,\r\n  Filter,\r\n  Create,\r\n  TextInput,\r\n  ReferenceInput,\r\n  SelectInput,\r\n  SimpleForm,\r\n  LongTextInput,\r\n  SimpleList,\r\n  Responsive,\r\n  // ReferenceField,\r\n  DisabledInput\r\n} from \"react-admin\";\r\n\r\nconst PostFilter = props => (\r\n  <Filter {...props}>\r\n    <TextInput label=\"Search\" source=\"q\" alwaysOn />\r\n    <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\" allowEmpty>\r\n      <SelectInput optionText=\"name\" />\r\n    </ReferenceInput>\r\n  </Filter>\r\n);\r\n\r\nexport const ChekTransaksi = props => (\r\n  <List title=\"Check Transaction\" {...props} filters={<PostFilter />}>\r\n    <Responsive\r\n      small={\r\n        <SimpleList\r\n          primaryText={record => record.title}\r\n          secondaryText={record => `${record.views} views`}\r\n          tertiaryText={record =>\r\n            new Date(record.published_at).toLocaleDateString()\r\n          }\r\n        />\r\n      }\r\n      medium={\r\n        <Datagrid>\r\n          <TextField source=\"id\" />\r\n          <TextField source=\"name\" />\r\n          <TextField source=\"username\" />\r\n          <EmailField source=\"email\" />\r\n        </Datagrid>\r\n      }\r\n    />\r\n  </List>\r\n);\r\n\r\nconst PostTitle = ({ record }) => {\r\n  return <span>Post {record ? `\"${record.title}\"` : \"\"}</span>;\r\n};\r\nexport const PostEdit = props => (\r\n  <Edit title={<PostTitle />} {...props}>\r\n    <SimpleForm>\r\n      <DisabledInput source=\"id\" />\r\n      <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\">\r\n        <SelectInput optionText=\"name\" />\r\n      </ReferenceInput>\r\n      <TextInput source=\"title\" />\r\n      <LongTextInput source=\"body\" />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n\r\nexport const PostCreate = props => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\">\r\n        <SelectInput optionText=\"name\" />\r\n      </ReferenceInput>\r\n      <TextInput source=\"title\" />\r\n      <LongTextInput source=\"body\" />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n","// in src/users.js\r\nimport React from \"react\";\r\nimport { List, Datagrid, EmailField, TextField } from \"react-admin\";\r\n\r\nexport const ItemList = props => (\r\n  <List title=\"All Items\" {...props}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"name\" />\r\n      <TextField source=\"username\" />\r\n      <EmailField source=\"email\" />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n","import React from \"react\";\r\nimport { List, Datagrid, EmailField, TextField } from \"react-admin\";\r\n\r\nexport const ScheduleList = props => (\r\n  <List title=\"Schedule Pickup\" {...props}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"name\" />\r\n      <TextField source=\"username\" />\r\n      <EmailField source=\"email\" />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n","// in src/posts.js\r\nimport React from \"react\";\r\nimport { List, Datagrid, TextField } from \"react-admin\";\r\n\r\nexport const MyAccount = props => (\r\n  <List title=\"My Account\" {...props}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"title\" />\r\n      <TextField source=\"body\" />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n","// in src/UpdateHarga.js\r\n// import React from \"react\";\r\n// import { List, Datagrid, EmailField, TextField } from \"react-admin\";\r\n\r\n// export const UpdateHarga = props => (\r\n//   <List title=\"add/update pricing\" {...props}>\r\n//     <Datagrid>\r\n//       <TextField source=\"id\" />\r\n//       <TextField source=\"name\" />\r\n//       <TextField source=\"username\" />\r\n//       <EmailField source=\"email\" />\r\n//     </Datagrid>\r\n//   </List>\r\n// );\r\n\r\nimport React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport { List } from \"react-admin\";\r\n\r\nconst cardStyle = {\r\n  width: 300,\r\n  minHeight: 300,\r\n  margin: \"0.5em\",\r\n  display: \"inline-block\",\r\n  verticalAlign: \"top\"\r\n};\r\nconst GAMBAR = () => (\r\n  <div style={{ margin: \"1em\" }}>\r\n    <Card style={cardStyle}>\r\n      <CardHeader title=\"Kaleng\" />\r\n      <CardContent>INI GAMBAR SAMPAH</CardContent>\r\n      <CardContent>sssss about&nbsp;</CardContent>\r\n      <CardActions style={{ textAlign: \"right\" }} />\r\n    </Card>\r\n\r\n    <Card style={cardStyle}>\r\n      <CardHeader title=\"Kardus\" />\r\n      <CardContent>INI GAMBAR SAMPAH</CardContent>\r\n      <CardContent>sssss about&nbsp;</CardContent>\r\n      <CardActions style={{ textAlign: \"right\" }} />\r\n    </Card>\r\n\r\n    <Card style={cardStyle}>\r\n      <CardHeader title=\"Botol AQua\" />\r\n      <CardContent>INI GAMBAR SAMPAH</CardContent>\r\n      <CardContent>sssss about&nbsp;</CardContent>\r\n      <CardActions style={{ textAlign: \"right\" }} />\r\n    </Card>\r\n\r\n    <Card style={cardStyle}>\r\n      <CardHeader title=\"lcnskjdcnasc\" />\r\n      <CardContent>INI GAMBAR SAMPAH</CardContent>\r\n      <CardContent>sssss about&nbsp;</CardContent>\r\n      <CardActions style={{ textAlign: \"right\" }} />\r\n    </Card>\r\n\r\n    <Card style={cardStyle}>\r\n      <CardHeader title=\"asdfnksjbc\" />\r\n      <CardContent>INI GAMBAR SAMPAH</CardContent>\r\n      <CardContent>sssss about&nbsp;</CardContent>\r\n      <CardActions style={{ textAlign: \"right\" }} />\r\n    </Card>\r\n\r\n    <Card style={cardStyle}>\r\n      <CardHeader title=\"asdfnksjbc\" />\r\n      <CardContent>INI GAMBAR SAMPAH</CardContent>\r\n      <CardContent>sssss about&nbsp;</CardContent>\r\n      <CardActions style={{ textAlign: \"right\" }} />\r\n    </Card>\r\n  </div>\r\n);\r\n\r\nexport const UpdateHarga = props => (\r\n  <List title=\"Add/Update Pricings\" {...props}>\r\n    <GAMBAR />\r\n  </List>\r\n);\r\n","// in src/trashpurchase.js\r\nimport React from \"react\";\r\nimport { List, Datagrid, EmailField, TextField } from \"react-admin\";\r\n\r\nexport const trashpurchase = props => (\r\n  <List title=\"Trash Purchase List\" {...props}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"name\" />\r\n      <TextField source=\"username\" />\r\n      <EmailField source=\"email\" />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n","// in src/Dashboard.js\r\nimport React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\n\r\n// const CommentGrid = ({ ids, data, basePath }) => (\r\n//   <div style={{ margin: \"1em\" }}>\r\n//     {ids.map(id => (\r\n\r\nexport default () => (\r\n  <Card>\r\n    <CardHeader title=\"Selamat Datang di Tampah Bank\" />\r\n    <CardContent />\r\n    <CardActions style={{ textAlign: \"right\" }} />\r\n  </Card>\r\n);\r\n","// in src/authProvider.js\r\nimport { AUTH_LOGIN, AUTH_LOGOUT, AUTH_ERROR, AUTH_CHECK } from \"react-admin\";\r\n\r\nexport default (type, params) => {\r\n  // called when the user attempts to log in\r\n  if (type === AUTH_LOGIN) {\r\n    const { username } = params;\r\n    localStorage.setItem(\"username\", username);\r\n    // accept all username/password combinations\r\n    return Promise.resolve();\r\n  }\r\n  // called when the user clicks on the logout button\r\n  if (type === AUTH_LOGOUT) {\r\n    localStorage.removeItem(\"username\");\r\n    return Promise.resolve();\r\n  }\r\n  // called when the API returns an error\r\n  if (type === AUTH_ERROR) {\r\n    const { status } = params;\r\n    if (status === 401 || status === 403) {\r\n      localStorage.removeItem(\"username\");\r\n      return Promise.reject();\r\n    }\r\n    return Promise.resolve();\r\n  }\r\n  // called when the user navigates to a new location\r\n  if (type === AUTH_CHECK) {\r\n    return localStorage.getItem(\"username\")\r\n      ? Promise.resolve()\r\n      : Promise.reject();\r\n  }\r\n  return Promise.reject(\"Unknown method\");\r\n};\r\n","// in src/App.js\nimport React from \"react\";\nimport { Admin, Resource } from \"react-admin\";\n\nimport { PostList, PostEdit, PostCreate } from \"./menu/post\";\nimport { UserList } from \"./menu/user\";\nimport { ChekTransaksi } from \"./menu/transaction\";\nimport { ItemList } from \"./menu/item\";\nimport { ScheduleList } from \"./menu/schedule\";\nimport { MyAccount } from \"./menu/myAccount\";\nimport { UpdateHarga } from \"./menu/updatePrice\";\nimport { trashpurchase } from \"./menu/trashPurchase\";\nimport Dashboard from \"./Dashboard\";\nimport authProvider from \"./authProvider\";\n\nimport jsonServerProvider from \"ra-data-json-server\";\n//import simpleRestProvider from \"ra-data-json-server\";\n//import dataProvider from './dataProvider';\n\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport index from \"@material-ui/core/colors/index\";\nimport PostIcon from \"@material-ui/icons/Book\";\nimport UserIcon from \"@material-ui/icons/Group\";\nimport AddShoppingCart from \"@material-ui/icons/AddShoppingCart\";\nimport List from \"@material-ui/icons/List\";\nimport DateRange from \"@material-ui/icons/DateRange\";\nimport AccountBox from \"@material-ui/icons/AccountBox\";\nimport AddCircleOutline from \"@material-ui/icons/AddCircleOutline\";\n\nconst dataProvider = jsonServerProvider(\"http://jsonplaceholder.typicode.com\");\nconst theme = createMuiTheme({\n  palette: {\n    primary: index,\n    secondary: {\n      main: \"#00e5ff\"\n    }\n  }\n});\nconst App = () => (\n  <Admin\n    title\n    theme={theme}\n    dashboard={Dashboard}\n    authProvider={authProvider}\n    dataProvider={dataProvider}\n  >\n    <Resource\n      name=\"posts\"\n      list={PostList}\n      edit={PostEdit}\n      create={PostCreate}\n      icon={PostIcon}\n    />\n    <Resource name=\"users\" list={UserList} icon={UserIcon} />\n    <Resource name=\"transactions\" list={ChekTransaksi} icon={AddShoppingCart} />\n    <Resource name=\"Items\" list={ItemList} icon={List} />\n    <Resource name=\"schedules\" list={ScheduleList} icon={DateRange} />\n    <Resource name=\"MyAccount\" list={MyAccount} icon={AccountBox} />\n    <Resource\n      name=\"Add/Update Pricing\"\n      list={UpdateHarga}\n      icon={AddCircleOutline}\n    />\n    <Resource name=\"Trash Purchase\" list={trashpurchase} icon={AccountBox} />\n  </Admin>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}